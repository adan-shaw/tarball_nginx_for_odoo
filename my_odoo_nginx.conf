#
# 该nginx 策略, 是以一个双核4G 的主机为蓝本的, 在主机上面同时运行nginx + odoo + psql
#

#
# *L1 层的'单项配置'*:
#
daemon on; # 以守护进程方式启动nginx
master_process on; # 以master/worker 进程方式启动
error_log logs/error.log info; # nginx 错误日志文件路径为<prefix_dir>/logs/error.log, level=info
pid logs/nginx.pid; # 设置master 进程的pid 文件存放路径.
user www-data www-data; # 设置worker 进程的运行用户和组, 最小权限原则!! 反正反响代理之后, 数据会转发到子站点中.
worker_rlimit_nofile 8096; # 设置单一个worker 进程能打开的文件句柄大小, 8096 足矣.

worker_processes 1; # worker 进程的数量, 2 核心但还要带odoo 的话, 还是 1 个worker 就可以了. 默认=1
worker_cpu_affinity 1;
#worker_processes 2; # 两核方案
#worker_cpu_affinity 10 01;
#worker_processes 4; # 4 核方案
#worker_cpu_affinity 1000 0100 0010 0001;

ssl_engine rdrand; # ssl 硬件加速, 检查自己有没有ssl 硬件加速: openssl engine -t
worker_priority 0; # worker 进程的Nice 值, 一般不改.






#
# *L1 层的'配置块'*:
#
#######################
# events 事件类型配置[L1]
#######################
events {
accept_mutex off;
#lock_file logs/nginx.lock; # accept_mutex 锁可能需要的temp 文件, 只有开启accept_mutex 锁时有效.
#accept_mutex_delay 500ms; # worker 进程再次取accept_mutex 锁的间隔, 默认值500 ms.
multi_accept off; # 就算同一个客户端, 发起两次请求, 也相应两个链接. 这样是不必要的, 一般默认off!
use epoll; # [epoll | poll | select | kqueue 等等, 默认会自动选择最高效率的那一个.]
worker_connections 1024; #  每个worker 进程的最大链接数量.
}





#
# *L1 层的'配置块'*:
#
##################
# HTTP 类型配置[L1]
##################
http {
#
# *L2 层的'单项配置'*:
#
  types_hash_bucket_size 128; # 32|64|128 长度
  types_hash_max_size 4096; # 由于应用服务器文件名类型较多, double 一下, 默认是1024
  include ../mime.types; # 包含其他配置文件, 注意被包含的文件的'配置块level'!!
  #
  # 网络配置
  #
  client_header_timeout 20s; # client 与server 建立链接后, 发送HTTP 头部的超时时间, 默认60s.
  client_body_timeout 40s; # client 发送包体的超时时间, 默认60s.
  send_timeout 30s; # nginx 给客户端发送数据包, 但是客户端却不接, 超时一般可以设置少一点, 默认60s.
  #reset_timeout_connection on; # 客户端超时后, 直接给客户端发送RST包, 关掉sock, 清空缓存,不等4次握手就断开.
  lingering_close off; # 如果是浏览性http server, 直接off 暴力关闭client
  lingering_time 30s; # 客户端上传数据超时时间. 只有在lingering_close on/always 的情况下有效.
  lingering_timeout 5s; # 只有在lingering_close on/always 的情况下有效.

  keepalive_disable msie6 safari; # 这是默认值, 目的就是屏蔽旧浏览器的keepalive 功能. 默认值即可.
  keepalive_timeout 45s; # 长连接存活的时间, 75s, 客户端长链接策略一般以服务器下发的为准.
  keepalive_requests 64; # nginx 允许的长链接客户端的最大数量, 单个worker 容纳768 个客户, 这里可以动态修改


  #tcp_nodelay on; # 确定对keepalive 链接是否使用tcp_nodelay 选项.
  tcp_nodelay off; # 优化网络利用率, 大包发送.

  tcp_nopush on; # 在打开sendfile 选项时, 确定是否开启freebsd 的tcp_nopush 或者linux 的tcp_cork 功能.
  client_max_body_size 3m; # 允许客户端上传的数据包体总长度 = 默认1 MB, 你可以适当加大. 3mb 的图片
  #limit_rate 0; # 限制'客户端请求'每秒上传到nginx 的字节数, 默认值0 表示不限制.
  limit_rate 64k; # 限速64 kb
  limit_rate_after 3m; # nginx 向客户端下发数据, 超过3 mb 之后开始限速, 按照limit_rate 的值执行.

  sendfile on; # 启用linux 上面的sendfile 系统调用, 来发送文件, 它可以减少内核态与用户态之间的两次内存复制.
  aio off; # 该功能和sendfile 是互斥的, 默认值off, 这个是启动内核层面的文件异步功能.
  directio off; # 该功能和sendfile 是互斥的, 默认值off, 这个对读取大文件有帮助.
  directio_alignment 4k; # 一般来说512 b 已经够了, 但是这里设置4k, 这是配套读取大文件时, 以对齐内存的方式读取

  open_file_cache max=1000 inactive=60s;
  #open_file_cache=off; # 关闭文件缓存功能, 默认值是关闭的, 但是你可以打开, 如果你是静态网站的话. 
  open_file_cache_errors off; # 打开文件失败信息-> error.log, 调试可以打开. 默认off
  open_file_cache_min_uses 64; # 1000 个文件缓存信息中, 60s 没用就会被淘汰, 但最少保留1 个缓存信息不被清除?
  #open_file_cache_vaild 60s; # 每60s 检查一次缓存信息是否还有效[open_file_cache 检测时钟, 定时器]
#
#
  ignore_invalid_headers on; # 忽略HTTP 头部不合法的client, 拒绝服务, 直接回发400.
  underscores_in_headers off; # 不允许HTTP 头部出现 "_" 下画线字符!!
#
  #if_modified_since off; # 调试的时候, 关闭客户端缓存机制, 不允许客户端缓存数据.
  if_modified_since exact; # 运行客户端产生缓存, 减少数据下发量.

  log_not_found on; # 如果没有找到资源, 写到error.log 日志中.
  merge_slashes on; # 是否合并' / ' 字符, 例如: URI ///qq///.txt, 开启on 后, 就会执行合并: /qq/.txt
#
  #resolver 192.168.5.1; # 设置DNS 服务器的地址.
  resolver_timeout 30s; # nginx 需要'子网群集'时, 可能会用到. 如果dns 解析超时, 则中断转发数据.
  server_tokens off; # 发生错误时, 是否告知client 服务器网关是nginx.





    ##
    # SSL Settings
    ##
    #ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
    #ssl_prefer_server_ciphers on;



    ##
    # Logging Settings
    ##
    access_log logs/access.log; # 访问日志路径设置



    ##
    # Gzip Settings
    ##
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css text/xml application/json application/xml text/javascript application/javascript application/x-javascript application/rss+xml;





#
# *L2 层的'配置块'*:
#
  include my_odoo_vhost.conf; # 主要是n个server {} 块 + 一个upstream {} 块. 
#                          注意, 这里不能拆分了, 哪怕有多个server {} 显得很长, 群集需要server+upstream配合



} # http {} end
