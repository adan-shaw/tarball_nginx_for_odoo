#
# *L2 层的'配置块'*:
#
# upstream {} 反向代理块.
upstream odooSrv {
  # 权重2, 错误次数超过3 次, 静默30s
  server 127.0.0.1:8069 weight=2 max_fails=3 fail_timeout=30s;
}




#
# *L3 层的'配置块'*:
#
proxy_temp_path proxy_temp;
proxy_cache_path proxy_cache_temp levels=1:2 keys_zone=cacheX:64m inactive=3d max_size=512m;
proxy_buffer_size 32k;
proxy_buffers 8 32k;
proxy_busy_buffers_size 64k;
proxy_temp_file_write_size 64k; 

proxy_connect_timeout 30s;
proxy_send_timeout 30s;
proxy_read_timeout 60s;





server {
  listen 192.168.56.1:80 rcvbuf=64k sndbuf=32k deferred; # 单网卡版, no ssl
  server_name "localhost" 192.168.56.1;
  #server_names_hash_bucket_size 64; # nginx 用哈希结构来存储dns 域名, 加快索引速度.
  #server_names_hash_max_size 512k; # 哈希结构max 大小, 512 对于64 可以存好几个域名了, 默认值即可.
  server_name_in_redirect on; # 遇到重定向请求时, 改写client 请求头部的host = nginx 服务器的ip.

  # 站点的root 根目录, odoo 注意更改为addons的实际路径.
  root GreenOdoo-8.0-linux64/source/openerp/addons; # tarball





# location 块, 一般根据业务来确定, 无需多搞, passed !!
  location / {

    proxy_pass http://odooSrv; # 指定反向代理块=[upstream odooSrv {} ], 也可以是unix socket, 但不推荐

    proxy_set_header Host $host; # ??
    proxy_set_header X-Real-IP $remote_addr; # ??
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # ??

    proxy_pass_header Set-Cookie; # 与proxy_hide_header 相反, 
                                  # proxy_pass_header 将默认proxy_hide_header 的选项, 设置为可以转发

    proxy_pass_request_body on; # 是否向upstream{} 上游发送包体数据. 默认on
    proxy_pass_request_headers on; # 是否向upstream{} 上游发送HTTP 头部. 默认on

    proxy_redirect off; # 当upstream{}上游返回的响应, 是重定向/刷新请求时(响应码301/302), 

    proxy_next_upstream error timeout invalid_header http_502 http_504;
    #proxy_next_upstream error timeout; # 如果客户端请求的业务机出错, 那么nginx 将继续换一台业务机处理请求?

    proxy_cache cacheX;
    proxy_cache_key $host$request_uri$request_body;

    proxy_buffering on;
    proxy_cache_valid 200 304 1d; # ??
    proxy_cache_valid any 1d; # ??
    proxy_cache_valid 1d; # ??
    expires 1d;
  }

  location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
    proxy_buffering on;
    proxy_cache_valid 1d;
    expires 1d;
  }



} # server {} end
